Map:
Map is a collection of key,value pairs, in which keys can be of any data type, unlike objects in which keys are of string type only
methods:
new Map() : create a new Map
map.set(key, value) – stores the value by the key.
map.get(key) – returns the value by the key, undefined if key doesn’t exist in map.
map.has(key) – returns true if the key exists, false otherwise.
map.delete(key) – removes the element (the key/value pair) by the key.
map.clear() – removes everything from the map.
map.size – returns the current element count.

Iteration over map
map.keys() – returns an iterable for keys,
map.values() – returns an iterable for values,
map.entries() – returns an iterable for entries [key, value], it’s used by default in for..of.

Map also has a forEach loop
map.forEach( (value, key, map) => {
  alert(`${key}: ${value}`); 
});

When Map is created, it can be initialized with an array of key/value pairs
let map = new Map([
    [1,"one"],
    [2,"two]
])

Creating a Map from Object
to create a map from object, Object.entries(obj) method is used.
Object.entries() gives an array of key/value pairs.
let map = new Map(Object.entries(obj));

Creating an Object from Map
Object.fromEntries() is used : given an array of [key, value] pairs, it creates an object from them
let prices = Object.fromEntries([
  ['banana', 1],
  ['orange', 2],
  ['meat', 4]
]);

// now prices = { banana: 1, orange: 2, meat: 4 }

let map = new Map();
map.set('banana', 1);
map.set('orange', 2);
map.set('meat', 4);

let obj = Object.fromEntries(map.entries()); // make a plain object (*)

// done!
// obj = { banana: 1, orange: 2, meat: 4 }
Object.fromEntries expects an iterable object as the argument. Not necessarily an array. And the standard iteration for map returns same key/value pairs as map.entries(). So we get a plain object with same key/values as the map.

Set 
A Set is a special type collection, where each value may occur only once. “set of values” (without keys)
new Set([iterable]) – creates the set, and if an iterable object is provided (usually an array), copies values from it into the set.
set.add(value) – adds a value, returns the set itself.
set.delete(value) – removes the value, returns true if value existed at the moment of the call, otherwise false.
set.has(value) – returns true if the value exists in the set, otherwise false.
set.clear() – removes everything from the set.
set.size – is the elements count.

We can loop over a set either with for..of or using forEach:
let set = new Set(["oranges", "apples", "bananas"]);

for (let value of set) alert(value);

// the same with forEach:
set.forEach((value, valueAgain, set) => {
  alert(value);
});

set.keys() – returns an iterable object for values,
set.values() – same as set.keys(), for compatibility with Map,
set.entries() – returns an iterable object for entries [value, value], exists for compatibility with Map.